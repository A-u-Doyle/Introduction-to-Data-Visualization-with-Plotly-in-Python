import plotly.express as px 

Fixing a Plotly figure
Examine the monthly_sales dictionary that has been printed in the console to determine what is missing.
Update the type inside the data element of monthly_sales to be a bar chart.
Update the text element of the title of the layout element to be 'Sales for Jan-Mar 2020'.
Create a figure using go.Figure() and the monthly_sales dictionary.

# Examine the printed dictionary

# Update the type
monthly_sales['data'][0]['type'] = 'bar'

# Update the title text
monthly_sales['layout']['title']['text'] = 'Sales for Jan-Mar 2020'

# Create a figure
fig = go.Figure(monthly_sales)

# Print it out!
fig.show()

Student scores bar graph
The school board has asked you to come and look at some test scores. They want an easy way to visualize the score of different students within a small class. This seems like a simple use case to practice your bar chart skills!

In this exercise, you will help the school board team by creating a bar chart of school test score values.

A DataFrame student_scores has been provided. In this and all future exercises where it is needed, plotly.express has already been loaded as px.

Instructions
100 XP
Examine the head of the provided student_scores DataFrame that has been printed for you to see what it contains.
Create a simple bar plot, setting the y-axis to be the score and the x-axis to be the student name.
Add a title to the plot: call it 'Student Scores by Student'.

# Create the bar plot
fig = px.bar(data_frame=student_scores, 
             x='student_name', 
             y='score', 
             title='Student Scores by Student')

# Show the plot
fig.show()

Box plot of company revenues
Examine the head of the provided revenues DataFrame that has been printed for you to see what it contains.
Create a simple box plot, setting the appropriate y-axis for company revenue data.
Set the hover_data (a list of one string value) to show the company name.

# Create the box plot
fig = px.box(
  			# Set the data
  			data_frame=revenues, 
  			# Set the y variable
            y='Revenue', 
            # Add in hover data to see outliers
            hover_data=['Company'])

# Show the plot
fig.show()

Histogram of company revenues
Create a histogram with the appropriate DataFrame using px.histogram().
Set the column Revenue to be used along the x-axis.
Set the number of bins to be 5.

# Create a simple histogram
fig = px.histogram(
  			data_frame=revenues, 
            # Set up the x-axis
           	x='Revenue',
            # Set the number of bins
            nbins=5)

# Show the plot
fig.show()

Coloring student scores bar graph
Instructions
Create a color scale list from red (RGB code 255, 0, 0) to a nice green (RGB code 3, 252, 40).
Create a plotly.express bar chart using the student_scores DataFrame.
Set the color argument to the name of the appropriate numerical column.
Use my_scale as the color scale for the plot.

# Create your own continuous color scale
my_scale = ['rgb(255,0,0)', 'rgb(3,252,40)']

# Create the bar plot
fig = px.bar(data_frame=student_scores, 
             x='student_name', y='score', title='Student Scores by Student',
             # Set the color variable and scale
             color='score',
             color_continuous_scale=my_scale
             )

# Show the plot
fig.show()


Side-by-side revenue box plots with color

Industry-color RGB definitions:
Tech = 124, 250, 120
Oil = 112,128,144
Pharmaceuticals = 137, 109, 247
Professional Services = 255, 0, 0

Instructions
Create a dictionary to map the different Industry values to the RGB codes noted above.
Create a box plot of revenues, setting the y-axis to be the company revenue.
Use the industry color map you created in the box plot construction.
Set the appropriate column for the color variable.

# Create the industry-color map
ind_color_map = {'Tech': 'rgb(124, 250,120)','Oil': 'rgb(112,128,144)' ,
                 'Pharmaceuticals': 'rgb(137,109,247)','Professional Services':
				 'rgb(255,0,0)'}

# Create the basic box plot
fig = px.box(
  			# Set the data and y variable
  			data_frame=revenues, y='Revenue',
  			# Set the color map and variable
			color_discrete_map=ind_color_map,
			color='Industry')

# Show the plot
fig.show()

Revenue histogram with stacked bars
Create a dictionary to map the different Industry values to the RGB codes noted above.
Create a histogram of revenues, setting the x-axis to be the company revenue.
Use the industry color map you created in the histogram plot construction.
Set the appropriate column for the color argument.
# Create the industry-color map
ind_color_map = {'Tech': 'rgb(124,250,120)', 'Oil': 'rgb(112,128,144)', 
                 'Pharmaceuticals': 'rgb(137,109,247)', 
                 'Professional Services': 'rgb(255,0,0)'}

# Create a simple histogram
fig = px.histogram(
  			# Set the data and x variable
  			data_frame=revenues, x='Revenue', nbins=5,
    		# Set the color map and variable
			color_discrete_map=ind_color_map,
			color='Industry')

# Show the plot
fig.show()

Ch2

Building a scatterplot with specific colors
Instructions
Create a color_map dictionary that maps the species (Adelie, Gentoo, Chinstrap) to the RGB codes (235, 52, 52), (235, 149, 52), and (67, 52, 235) respectively.
Create a basic scatterplot using plotly.express for the penguins data, visualizing the features Culmen Length (mm) on the x-axis and Culmen Depth (mm) on the y-axis.
Set the colors of the scatterplot to be the Species and use the color_map that you created.


# Set up the color map
color_map = {'Adelie': 'rgb(235,52,52)' , 'Gentoo': 'rgb(235,149,52)', 'Chinstrap': 'rgb(67,52,235)'}

# Create a scatterplot
fig = px.scatter(data_frame=penguins, title="Penguin Culmen Statistics",
    x='Culmen Length (mm)',
    y='Culmen Depth (mm)',
    # Set the colors to use your color map
    color='Species',
    color_discrete_map=color_map
)

# Show your work
fig.show()


Bird feature correlations
Instructions 
Create a Pearson correlation table using pandas and save it as penguin_corr.
Create the correlation plot using go.Heatmap(), with appropriate x, y and z elements.
Use the red-green colorscale ('rdylgn') in the correlation plot.
Set the min and max values of the correlation plot to align with the minimum and maximum values a Pearson correlation can take.


# Create a correlation table with pandas
penguin_corr = penguins.corr(method='pearson')

# Set up the correlation plot
fig = go.Figure(go.Heatmap(
  		# Set the appropriate x, y and z values
        z=penguin_corr.values.tolist(),
        x=penguin_corr.columns,
        y=penguin_corr.columns,
  		# Set the color scale,
        colorscale='rdylgn', 
  		# Set min and max values
        zmin=-1, zmax=1))

# Show the plot
fig.show()




